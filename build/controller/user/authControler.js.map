{"version":3,"sources":["../../../src/controller/user/authControler.js"],"names":["Signup","req","res","body","email","name","phone","password","isAdmin","userSchema","find","user","length","status","json","data","errors","value","msg","param","location","message","hashPassword","save","console","log","Login","findOne","matchPassword","bcrypt","compareSync","token","jwt","sign","id","_id","process","env","jwt_secret","expiresIn","Profile","err"],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport userSchema from \"../../models/schemas/userSchema\";\nimport { hash } from \"../../utils/hashPass\";\n\nexport const Signup = async (req, res) => {\n  try {\n    const { email, name, phone, password, isAdmin } = req.body;\n    let user = await userSchema.find({ email: email });\n    if (user.length > 0) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: req.body.email,\n            msg: \"User already exists.\",\n            param: \"invalid\",\n            location: \"body\",\n          },\n        ],\n        message: \"Unable to create user\",\n      });\n    }\n\n    const hashPassword = await hash(password, 10);\n    user = new userSchema({\n      name,\n      email,\n      phone,\n      isAdmin,\n      password: hashPassword,\n    });\n    await user.save();\n    res.status(200).json({\n      data: {},\n      errors: [],\n      message: \"Signed Up successfully!!\",\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const Login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    const user = await userSchema.findOne({ email: email });\n    if (!user) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: email,\n            msg: \"Invalid credentials\",\n            param: \"invalid\",\n            location: \"body\",\n          },\n        ],\n        message: \"Invalid credentials\",\n      });\n    }\n\n    const matchPassword = bcrypt.compareSync(password, user.password);\n    if (!matchPassword) {\n      return res.status(400).json({\n        data: {},\n        errors: [\n          {\n            value: password,\n            msg: \"Invalid credentials\",\n            param: \"invalid\",\n            location: \"body\",\n          },\n        ],\n        message: \"Invalid credentials\",\n      });\n    } else {\n      const token = jwt.sign({ id: user._id }, process.env.jwt_secret, {\n        expiresIn: \"1d\",\n      });\n      res.status(200).json({\n        data: { token, user },\n        errors: [],\n        message: \"Login successfully!\",\n      });\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};\n\nexport const Profile = async (req, res) => {\n  try {\n    res.status(200).json({\n      data: req.user,\n      errors: [],\n      message: \"Fetched data form user\",\n    });\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n"],"file":"authControler.js"}