{"version":3,"sources":["../../../src/controller/admin/hotelsControler.js"],"names":["addHotel","req","res","body","city","hotelName","address","price","hotelImg","totalRooms","rating","facility","citySchems","findOne","cityName","save","hotelSchema","hotel","status","json","data","errors","value","msg","param","location","message","adminId","user","_id","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEO,IAAMA,QAAQ;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAWhBD,GAAG,CAACE,IAXY,EAGlBC,IAHkB,aAGlBA,IAHkB,EAIlBC,SAJkB,aAIlBA,SAJkB,EAKlBC,OALkB,aAKlBA,OALkB,EAMlBC,KANkB,aAMlBA,KANkB,EAOlBC,QAPkB,aAOlBA,QAPkB,EAQlBC,UARkB,aAQlBA,UARkB,EASlBC,MATkB,aASlBA,MATkB,EAUlBC,QAVkB,aAUlBA,QAVkB;AAAA;AAAA,mBAYCC,uBAAWC,OAAX,CAAmB;AAAET,cAAAA,IAAI,EAAEA;AAAR,aAAnB,CAZD;;AAAA;AAYhBU,YAAAA,QAZgB;;AAAA,gBAafA,QAbe;AAAA;AAAA;AAAA;;AAclBA,YAAAA,QAAQ,GAAG,IAAIF,sBAAJ,CAAe;AACxBR,cAAAA,IAAI,EAAEA;AADkB,aAAf,CAAX;AAdkB;AAAA,mBAiBZU,QAAQ,CAACC,IAAT,EAjBY;;AAAA;AAAA;AAAA,mBAoBFC,wBAAYH,OAAZ,CAAoB;AAAER,cAAAA,SAAS,EAAEA;AAAb,aAApB,CApBE;;AAAA;AAoBhBY,YAAAA,KApBgB;;AAAA,iBAqBhBA,KArBgB;AAAA;AAAA;AAAA;;AAAA,6CAsBXf,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,cAAAA,IAAI,EAAE,EADoB;AAE1BC,cAAAA,MAAM,EAAE,CACN;AACEC,gBAAAA,KAAK,EAAEjB,SADT;AAEEkB,gBAAAA,GAAG,EAAE,qBAFP;AAGEC,gBAAAA,KAAK,EAAE,SAHT;AAIEC,gBAAAA,QAAQ,EAAE;AAJZ,eADM,CAFkB;AAU1BC,cAAAA,OAAO,EAAE;AAViB,aAArB,CAtBW;;AAAA;AAoCpBT,YAAAA,KAAK,GAAG,IAAID,uBAAJ,CAAgB;AACtBW,cAAAA,OAAO,EAAE1B,GAAG,CAAC2B,IAAJ,CAASC,GADI;AAEtBzB,cAAAA,IAAI,EAAJA,IAFsB;AAGtBC,cAAAA,SAAS,EAATA,SAHsB;AAItBC,cAAAA,OAAO,EAAPA,OAJsB;AAKtBC,cAAAA,KAAK,EAALA,KALsB;AAMtBC,cAAAA,QAAQ,EAARA,QANsB;AAOtBC,cAAAA,UAAU,EAAVA,UAPsB;AAQtBC,cAAAA,MAAM,EAANA,MARsB;AAStBC,cAAAA,QAAQ,EAARA;AATsB,aAAhB,CAAR;AApCoB;AAAA,mBAgDdM,KAAK,CAACF,IAAN,EAhDc;;AAAA;AAiDpBb,YAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,cAAAA,IAAI,EAAEH,KADa;AAEnBI,cAAAA,MAAM,EAAE,EAFW;AAGnBK,cAAAA,OAAO,EAAE;AAHU,aAArB;AAjDoB;AAAA;;AAAA;AAAA;AAAA;AAuDpBI,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAML,OAAlB;;AAvDoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAR1B,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import citySchems from \"../../models/schemas/citySchema\";\r\nimport roomSchems from \"../../models/schemas/roomSchema\";\r\nimport hotelSchema from \"../../models/schemas/hotelSchema\";\r\n\r\nexport const addHotel = async (req, res) => {\r\n  try {\r\n    const {\r\n      city,\r\n      hotelName,\r\n      address,\r\n      price,\r\n      hotelImg,\r\n      totalRooms,\r\n      rating,\r\n      facility,\r\n    } = req.body;\r\n    let cityName = await citySchems.findOne({ city: city });\r\n    if (!cityName) {\r\n      cityName = new citySchems({\r\n        city: city,\r\n      });\r\n      await cityName.save();\r\n    }\r\n\r\n    let hotel = await hotelSchema.findOne({ hotelName: hotelName });\r\n    if (hotel) {\r\n      return res.status(400).json({\r\n        data: {},\r\n        errors: [\r\n          {\r\n            value: hotelName,\r\n            msg: \"Hotel already exist\",\r\n            param: \"invalid\",\r\n            location: \"body\",\r\n          },\r\n        ],\r\n        message: \"Hotel already exist\",\r\n      });\r\n    }\r\n\r\n    hotel = new hotelSchema({\r\n      adminId: req.user._id,\r\n      city,\r\n      hotelName,\r\n      address,\r\n      price,\r\n      hotelImg,\r\n      totalRooms,\r\n      rating,\r\n      facility,\r\n    });\r\n\r\n    await hotel.save();\r\n    res.status(200).json({\r\n      data: hotel,\r\n      errors: [],\r\n      message: \"Hotel added successfully\",\r\n    });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n"],"file":"hotelsControler.js"}